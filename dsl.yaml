datasets:
  books:
    type: file
    path: "book_data.json"
  authors:
    type: file
    path: "author_data.json"

default_model: gpt-4o-mini

operations:
  analyze_title:
    type: parallel_map
    input:
      schema:
        title: str
    output:
      schema:
        word_count: int
        theme: str
        genre: str
    prompts:
      - name: word_count_analysis
        model: gpt-4o-mini
        prompt: |
          Count the number of words in the following book title:
          Title: {{ input.title }}
          Provide only the word count as an integer.
        output_keys:
          - word_count
      - name: theme_analysis
        model: gpt-4o-mini
        prompt: |
          Analyze the theme of the following book title:
          Title: {{ input.title }}
          Provide a concise description of the theme suggested by this title.
        output_keys:
          - theme
      - name: genre_analysis
        model: gpt-4o-mini
        prompt: |
          Determine the likely genre based on the following book title:
          Title: {{ input.title }}
          Provide a concise genre classification.
        output_keys:
          - genre
    validate:
      - output["word_count"] > 0
      - len(output["theme"]) > 0
      - len(output["genre"]) > 0
    tests:
      - input:
          title: "The Great Gatsby"
        expect:
          title: "The Great Gatsby"
          word_count: 4
          theme: "wealth and decadence"
          genre: "fiction"

  resolve_genres:
    type: resolve
    input:
      schema:
        genre: str
        title: str
        theme: str
    output:
      schema:
        genre: str
    embedding_model: "text-embedding-3-small"
    comparison_model: "gpt-4o-mini"
    reduction_model: "gpt-4o-mini"
    blocking_keys:
      - genre
    blocking_threshold: 0.9
    blocking_conditions:
      - "len(input1['genre']) > 0 and len(input2['genre']) > 0"
    comparison_prompt: |
      Compare the following two genre entries:
      Entry 1:
      Genre: {{ input1.genre }}
      Example Book: {{ input1.title }}
      Theme: {{ input1.theme }}

      Entry 2:
      Genre: {{ input2.genre }}
      Example Book: {{ input2.title }}
      Theme: {{ input2.theme }}

      Are these genres likely to be the same or closely related?
    reduction_prompt: |
      Given the following matched genre entries:
      {% for entry in matched_entries %}
      Entry {{ loop.index }}:
      Genre: {{ entry.genre }}
      Example Book: {{ entry.title }}
      Theme: {{ entry.theme }}
      {% endfor %}

      Determine the best resolved genre for this group of entries. The resolved genre should be a standardized, widely recognized genre category that best represents all matched entries.
    validate:
      - len(output["genre"]) > 0
    tests:
      - input:
          - genre: "sci-fi"
            title: "Dune"
            theme: "political intrigue and ecology"
          - genre: "science fiction"
            title: "Neuromancer"
            theme: "cyberpunk and artificial intelligence"
        expect:
          genre: "Science Fiction"
      - input:
          - genre: "mystery"
            title: "The Girl with the Dragon Tattoo"
            theme: "crime and corruption"
          - genre: "thriller"
            title: "Gone Girl"
            theme: "psychological manipulation"
        expect:
          genre: "Mystery/Thriller"

  analyze_author:
    type: map
    input:
      schema:
        name: str
        birth_year: int
    output:
      schema:
        writing_style: str
        primary_genre: str
    prompt: |
      Analyze the author: {{ input.name }} (born {{ input.birth_year }})
      Provide their writing style and primary genre. The genre should be at most a few words, not a full sentence.
    validate:
      - len(output["writing_style"]) > 0
      - len(output["primary_genre"]) > 0

  generate_summaries:
    type: map
    model: gpt-4o-mini
    input:
      schema:
        title: str
        theme: str
    output:
      schema:
        summaries: list[str]
    prompt: |
      Generate two summaries for the book "{{ input.title }}" with theme "{{ input.theme }}".
    validate:
      - len(output["summaries"]) == 2
      - all(len(summary) > 0 for summary in output["summaries"])
    tests:
      - input:
          title: "To Kill a Mockingbird"
          theme: "racial injustice"
        expect:
          - title: "To Kill a Mockingbird"
            summary: "A story about racial injustice and loss of innocence in the American South."
          - title: "To Kill a Mockingbird"
            summary: "Set in the 1930s Alabama, the novel follows Scout Finch as she learns about injustice when her father defends a black man falsely accused of a crime. It explores themes of racial inequality, moral growth, and the loss of innocence."

  explode_summaries:
    type: explode
    explode_key: summaries

  genre_summary:
    type: reduce
    reduce_key: genre
    input:
      schema:
        title: str
        word_count: int
        theme: str
        genre: str
    output:
      schema:
        book_count: int
        common_themes: list[str]
        average_word_count: float
        summary: str
    prompt: |
      Summarize the books in the {{ reduce_key }} genre:
      Books:
      {% for book in values %}
      - Title: "{{ book.title }}"
        Word Count: {{ book.word_count }}
        Theme: "{{ book.theme }}"
        Genre: "{{ book.genre }}"
      {% endfor %}
      Provide a concise summary of the genre based on these books, including:
      1. The number of books
      2. Common themes (list of 3-5 themes)
      3. Average word count of titles
      4. A brief overview of the genre based on these books
    validate:
      - output["book_count"] > 0
      - len(output["common_themes"]) >= 3
      - output["average_word_count"] > 0
      - len(output["summary"]) > 50
    tests:
      - input:
          reduce_key: "science fiction"
          values:
            - title: "Dune"
              word_count: 1
              theme: "political intrigue and ecology"
              genre: "science fiction"
            - title: "Neuromancer"
              word_count: 1
              theme: "cyberpunk and artificial intelligence"
              genre: "science fiction"
            - title: "The Hitchhiker's Guide to the Galaxy"
              word_count: 7
              theme: "absurdist space adventure"
              genre: "science fiction"
        expect:
          genre: "science fiction"
          book_count: 3
          common_themes:
            [
              "future technology",
              "space exploration",
              "cyberpunk",
              "artificial intelligence",
              "political ecology",
            ]
          average_word_count: 3.0
          summary: "Science fiction books in this sample explore diverse themes from political ecology to cyberpunk, showcasing the genre's breadth. They often focus on technological advancements and their impact on society."

  is_fiction:
    type: filter
    input:
      schema:
        genre: str
    output:
      schema:
        is_fiction: bool
    prompt: |
      Is the genre '{{ input.genre }}' fiction? Answer 'Yes' or 'No'.
    tests:
      - input:
          genre: "fiction"
        expect:
          is_fiction: true

  join_book_author:
    type: equijoin
    join_key:
      left:
        name: genre
        limit: 3
      right:
        name: primary_genre
        limit: 3
    embedding_model: "text-embedding-3-small"
    comparison_model: "gpt-4o-mini"
    blocking_threshold: 0.5
    blocking_conditions:
      - "len(left['genre']) > 0 and len(right['primary_genre']) > 0"
    comparison_prompt: |
      Compare the following two genre entries:
      Book Genre: {{ left.genre }}
      Author's Primary Genre: {{ right.primary_genre }}

      Are these genres likely to be the same or closely related?
    validate:
      - output is not None
    tests:
      - input:
          left:
            genre: "science fiction"
          right:
            primary_genre: "sci-fi"
        expect:
          matched: true
      - input:
          left:
            genre: "mystery"
          right:
            primary_genre: "romance"
        expect:
          matched: false

pipeline:
  steps:
    - name: book_analysis
      input: books
      operations:
        - analyze_title
        - resolve_genres
        - is_fiction
        - generate_summaries
        - explode_summaries
        - genre_summary

    - name: author_analysis
      input: authors
      operations:
        - analyze_author

    - name: combined_analysis
      operations:
        - join_book_author:
            left: book_analysis
            right: author_analysis

  output:
    type: file
    path: "genre_summaries.json"
