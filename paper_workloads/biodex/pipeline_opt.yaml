datasets:
  biodex_sample:
    path: /Users/shreyashankar/Documents/hacking/motion-v3/paper_workloads/biodex/biodex_sample.json
    type: file
  biodex_terms:
    path: /Users/shreyashankar/Documents/hacking/motion-v3/paper_workloads/biodex/biodex_terms.json
    type: file
default_model: gpt-4o-mini
operations:
  group_reactions:
    name: group_reactions
    optimize: false
    output:
      schema:
        ranked_conditions: list[string]
    pass_through: true
    prompt:
      "Given the following medical article, rank the following conditions in
      order of most confident to least confident that the article is describing the
      condition:

      {{ values[0].fulltext_processed }}


      Conditions: {% for value in values %}{{ value.reaction }}{% if not loop.last
      %}, {% endif %}{% endfor %}


      There may be conditions described in the article that are not in the list. Do
      not include them in the ranked list. Only focus on the conditions in the list.

      "
    reduce_key:
      - id
    type: reduce
  match_reactions:
    blocking_conditions:
      - all(word in left['fulltext_processed'].lower() for word in right['reaction'].lower().split())
    blocking_keys:
      left:
        - conditions
      right:
        - reaction
    blocking_threshold: 0.5253
    comparison_prompt: |
      {% set reaction_lower = right.reaction | lower | replace(',', ' ') | replace('.', ' ') %}
      {% set fulltext_lower = left.fulltext_processed | lower %}
      {% set total_words = reaction_lower | wordcount %}
      {% set current_word = '' %}
      {% set words_found = [] %}
      {% for char in reaction_lower %}
        {% if char == ' ' %}
          {% if current_word and current_word in fulltext_lower %}
            {% set words_found = words_found + [current_word] %}
          {% endif %}
          {% set current_word = '' %}
        {% else %}
          {% set current_word = current_word + char %}
        {% endif %}
      {% endfor %}
      {% if current_word and current_word in fulltext_lower %}
        {% set words_found = words_found + [current_word] %}
      {% endif %}
      {% set match_percentage = (words_found | length / total_words * 100) | round(2) %}

      Can the following condition be found in the following medical article?
      Medical article: {{ left.fulltext_processed }}

      Condition we are looking for: {{ right.reaction }}

      Analysis of condition words in the article:
      - Words found: {{ words_found | join(', ') or 'None' }}
      - Words not found: {{ words_not_found | join(', ') or 'None' }}
      - Percentage of words found: {{ match_percentage }}%

      Note that the presence of a condition is not solely determined by the presence of its individual words. You should consider the context and semantic meaning of the words in the article.

      Determine if {{ right.reaction }} is described in the medical article, considering the context and meaning beyond just the presence of individual words.
    embedding_model: text-embedding-3-small
    type: equijoin
  synthesized_conditions_extraction:
    model: gpt-4o-mini
    name: synthesized_conditions_extraction
    optimize: false
    output:
      schema:
        conditions: string
    prompt: |
      Extract all medical conditions discussed in the provided medical article: {{ input.fulltext_processed }}. Focus specifically on any unique
      characteristics, diagnostic criteria, or outcomes mentioned in the text. Ensure
      the output is clear and highlights key points related to the medical subject
      of the article.
    type: map
optimizer_config:
  equijoin:
    estimated_selectivity: 0.004
    target_recall: 0.75
  sample_sizes:
    equijoin: 500
pipeline:
  output:
    path: /Users/shreyashankar/Documents/hacking/motion-v3/paper_workloads/biodex/extracted_reactions_pipeline.json
    type: file
  steps:
    - name: synthesized_conditions_extraction
      input: biodex_sample
      operations:
        - synthesized_conditions_extraction

    - name: match_reactions
      operations:
        - match_reactions:
            left: synthesized_conditions_extraction
            right: biodex_terms

    - name: group_reactions
      input: match_reactions
      operations:
        - group_reactions
